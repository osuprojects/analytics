import pandas as pd
import re
import json
import logging
from typing import List, Dict, Any
from nltk.corpus import words as nltk_words

# Set up logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class AcronymIdentifier:
    def __init__(self, csv_file_path: str):
        self.acronyms = self._load_acronyms(csv_file_path)
        self.common_words = set(word.lower() for word in nltk_words.words())
        self.very_common_short_words = set(['it', 'is', 'at', 'on', 'in', 'to', 'of', 'for', 'the', 'and', 'a', 'an'])

    def _load_acronyms(self, file_path: str) -> Dict[str, List[Dict[str, str]]]:
        try:
            # Load CSV and replace NaN values in 'Description' column with an empty string
            df = pd.read_csv(file_path)
            df['Description'] = df['Description'].fillna('')  # Replace NaN with empty string
            acronyms = {}
            for _, row in df.iterrows():
                acronym = row['Acronym'].upper()
                if acronym not in acronyms:
                    acronyms[acronym] = []
                acronyms[acronym].append({
                    'meaning': row['Meaning'],
                    'description': row['Description']
                })
            return acronyms
        except Exception as e:
            logger.error(f"Error loading acronyms from CSV: {e}")
            raise

    def _is_common_word(self, word: str) -> bool:
        return word.lower() in self.common_words or word.lower() in self.very_common_short_words

    def _is_likely_acronym(self, word: str, context: List[str]) -> bool:
        upper_word = word.upper()
        
        if word.lower() in self.very_common_short_words and not word.isupper():
            return False
        
        if upper_word in self.acronyms:
            if len(word) <= 2 and self._is_common_word(word):
                return word.isupper()
            return True
        
        if word.isupper() and len(word) > 1:
            return True
        
        if word.istitle() and context.index(word) == 0 and self._is_common_word(word):
            return False
        
        if len(word) <= 3 and not self._is_common_word(word):
            return True
        
        return False

    def identify_acronyms(self, question: str) -> List[Dict[str, Any]]:
        try:
            identified = []
            words = re.findall(r'\b\w+\b', question)
            
            for word in words:
                upper_word = word.upper()
                if upper_word in self.acronyms and self._is_likely_acronym(word, words):
                    for meaning in self.acronyms[upper_word]:
                        identified.append({
                            'acronym': word,
                            'meaning': meaning['meaning'],
                            'description': meaning.get('description', '')  # Handle empty description
                        })
            
            return identified
        except Exception as e:
            logger.error(f"Error identifying acronyms: {e}")
            raise

def get_acronyms(question: str, csv_file_path: str) -> str:
    try:
        # Initialize the AcronymIdentifier with the provided CSV file path
        identifier = AcronymIdentifier(csv_file_path)
        matches = identifier.identify_acronyms(question)
        
        result = {
            'original_question': question,
            'identified_acronyms': matches
        }
        
        return json.dumps(result, indent=2)
    except Exception as e:
        logger.error(f"Error processing question: {e}")
        return json.dumps({"error": str(e)})




csv_file_path = ""
question = ""

# Call the get_acronyms function
result = get_acronyms(question, csv_file_path)
