from transformers import pipeline
from typing import List, Dict
import pandas as pd

class QuestionClassifier:
    def __init__(self, categories: List[str]):
        self.classifier = pipeline("zero-shot-classification", 
                                 model="facebook/bart-large-mnli")
        self.categories = categories
        
    def _build_context_string(self, metadata: Dict) -> str:
        """Build a context string from the metadata"""
        context_parts = [
            f"Page Category: {metadata.get('page_category', '')}",
            f"Page Subcategory: {metadata.get('page_subcategory', '')}",
            f"Page Path: {metadata.get('page_path', '')}"
        ]
        return " | ".join([part for part in context_parts if part])
    
    def _create_hypothesis_template(self, include_context: bool = True) -> str:
        """Create an appropriate hypothesis template based on whether context is included"""
        if include_context:
            return "Based on the question and the related documentation path information, this query is related to {}."
        return "This question is related to {}."
    
    def classify_with_confidence(self, 
                               question: str, 
                               metadata: Dict,
                               threshold: float = 0.3) -> Dict:
        """
        Classify a question using both the question text and metadata.
        Returns both primary and secondary classifications above threshold.
        """
        # Combine question with context
        context = self._build_context_string(metadata)
        full_text = f"Question: {question}\nContext: {context}"
        
        # Get classification with context
        hypothesis_template = self._create_hypothesis_template(include_context=True)
        result = self.classifier(
            full_text,
            self.categories,
            hypothesis_template=hypothesis_template,
            multi_label=True
        )
        
        # Process results
        classifications = []
        for label, score in zip(result['labels'], result['scores']):
            if score >= threshold:
                classifications.append({
                    'category': label,
                    'confidence': score,
                    'source': 'context_included'
                })
        
        # If no high-confidence results, try without context
        if not classifications:
            result_no_context = self.classifier(
                question,
                self.categories,
                hypothesis_template=self._create_hypothesis_template(include_context=False),
                multi_label=True
            )
            for label, score in zip(result_no_context['labels'], result_no_context['scores']):
                if score >= threshold:
                    classifications.append({
                        'category': label,
                        'confidence': score,
                        'source': 'question_only'
                    })
        
        return {
            'question': question,
            'context': context,
            'classifications': sorted(classifications, 
                                   key=lambda x: x['confidence'], 
                                   reverse=True)
        }

    def batch_classify(self, 
                      questions: List[str], 
                      metadata_list: List[Dict],
                      threshold: float = 0.3) -> List[Dict]:
        """Batch process multiple questions"""
        results = []
        for question, metadata in zip(questions, metadata_list):
            result = self.classify_with_confidence(question, metadata, threshold)
            results.append(result)
        return results

# Example usage


# Initialize classifier
classifier = QuestionClassifier(categories)


# Print results
print("\nClassification Results:")
for classification in result['classifications']:
    print(f"Category: {classification['category']}")
    print(f"Confidence: {classification['confidence']:.4f}")
    print(f"Source: {classification['source']}\n")
